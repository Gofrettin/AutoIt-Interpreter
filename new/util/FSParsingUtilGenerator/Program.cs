using System.Threading.Tasks;
using System.Linq;
using System.IO;
using System;

namespace FSParsingUtilGenerator
{
    public static class Program
    {
        public static async Task Main(string[] args)
        {
            using FileStream fs = new FileStream(args[0] + "/../ParsingUtil.fs", FileMode.Create, FileAccess.ReadWrite, FileShare.Read);
            using StreamWriter wr = new StreamWriter(fs);

            await wr.WriteAsync($@"// Autogenerated {DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}

namespace Unknown6656.AutoIt3.ExpressionParser

open Piglet.Parser.Configuration.Generic
open System

[<AutoOpen>]
module ParsingUtil =
    let internal reducef (s : NonTerminalWrapper<'a>) x =
        s.AddProduction().SetReduceFunction (Func<'a>(x))
        |> ignore

    // let internal reduce0 (s : NonTerminalWrapper<'a>) a =
    //     s.AddProduction(a).SetReduceToFirst()
    //     |> ignore
");

            for (int i = 1; i <= 10; ++i)
            {
                char[] vars = "abcdefghijklmnopqrstuvwyz"[..i].ToCharArray();

                await wr.WriteAsync($@"
    let internal reduce{i} (s : NonTerminalWrapper<'a>) {string.Join(" ", vars)} x =
        s.AddProduction({string.Join(", ", vars)}).SetReduceFunction (Func<{string.Join(", ", Enumerable.Repeat('_', i))}, 'a>(x))
        |> ignore
");
            }

            await wr.WriteAsync($@"
    let internal reduce0 s a = reduce1 s a id
");
            await wr.FlushAsync();
            await fs.FlushAsync();
        }
    }
}
