<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Autogenerated <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff") #>
// ANY CHANGES TO THIS DOCUMENT WILL BE LOST UPON RE-GENERATION

namespace AutoItCoreLibrary
{
    using v = AutoItVariantType;

<#
    const int COUNT = 32;

    for (int i = 1; i <= COUNT; ++i)
    {
#>
    internal delegate v AutoItDelegate<#=i #>(<#=string.Join(", ", Enumerable.Range(0, i).Select(x => "v p" + x)) #>);
<#
    }

    for (int i = 1; i <= COUNT; ++i)
    {
        string typename = "AutoItCurryingDelegate" + i;
        string delname = "AutoItDelegate" + i;
        string par(int x) => "p" + x;
#>

    internal sealed class <#=typename #>
    {
        public <#=delname #> Function { set; get; }

        public <#=typename #>()
            : this(null)
        {
        }

        public <#=typename #>(<#=delname #> f) => Function = f;

        public <#=typename #> Call() => this;
<#
        string allparams = string.Join(", ", Enumerable.Range(0, i).Select(par));

        for (int j = 1; j < i; ++j)
        {
#>

        public AutoItCurryingDelegate<#=i - j #> Call(<#=string.Join(", ", Enumerable.Range(0, j).Select(x => "v p" + x)) #>) =>
            new AutoItCurryingDelegate<#=i - j #>((<#=string.Join(", ", Enumerable.Range(j, i - j).Select(x => "v p" + x)) #>) => Function(<#=allparams #>));
<#
        }
#>

        public v Call(<#=string.Join(", ", Enumerable.Range(0, i).Select(x => "v p" + x)) #>) =>
            Function(<#=allparams #>);

        public static implicit operator <#=delname #>(<#=typename #> del) => del.Function;

        public static implicit operator <#=typename #>(<#=delname #> del) => new <#=typename #>(del);
    }
<#
    }
#>
}
